type Order {
    id: ID!
    userId: ID!
    carId: ID!
    totalAmount: Float!
    status: OrderStatus!
    paymentStatus: PaymentStatus!
    paymentMethod: String
    notes: String
    createdAt: String!
    updatedAt: String!
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PROCESSING
    COMPLETED
    CANCELLED
}

enum PaymentStatus {
    PENDING
    PAID
    FAILED
    REFUNDED
}

input OrderInput {
    userId: ID!
    carId: ID!
    totalAmount: Float!
    paymentMethod: String
    notes: String
}

input UpdateOrderInput {
    status: OrderStatus
    paymentStatus: PaymentStatus
    paymentMethod: String
    notes: String
}

type OrderStats {
    totalOrders: Int!
    pendingOrders: Int!
    completedOrders: Int!
    totalRevenue: Float!
}

type Query {
    orders: [Order!]!
    order(id: ID!): Order
    ordersByUser(userId: ID!): [Order!]!
    ordersByCar(carId: ID!): [Order!]!
    ordersByStatus(status: OrderStatus!): [Order!]!
    orderStats: OrderStats!
}

type Mutation {
    createOrder(input: OrderInput!): Order!
    updateOrder(id: ID!, input: UpdateOrderInput!): Order!
    cancelOrder(id: ID!): Order!
    confirmPayment(id: ID!): Order!
}